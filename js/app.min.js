(function() {
    'use strict';

    angular.module('contractor', [
            'ngAnimate',
            'ngCookies',
            'ngTouch',
            'ngSanitize',
            'ngAnimate',
            'mgcrea.ngStrap',
            'ui.router',
            'ui.footable',
            'ui.select',
            'restangular',
            'toastr',
            'chart.js',
            'angular.morris',
            'ui.bootstrap',
            'angularMoment',
            'angularSpinner',
            'ng.deviceDetector',
            'kk.timepicker',
            'angularFileUpload',
            'ngMask',
            'ngFileUpload',
            'ngDialog',
            'textAngular',
            'angularRipple',
            'angucomplete-alt',
            'LocalStorageModule'
        ])
        // .constant('API_URL', 'http://192.168.2.17:3000') //DEVELOPMENT
        .constant('API_URL', 'http://52.64.27.145:5001') //PRODUCTION
        .constant('API_VERSION', '/api/1.0/')
        .config(['$provide', '$stateProvider', '$urlRouterProvider', '$locationProvider', 'uiSelectConfig', 'RestangularProvider', 'API_URL', '$httpProvider', 'localStorageServiceProvider',
            function($provide, $stateProvider, $urlRouterProvider, $locationProvider, uiSelectConfig, RestangularProvider, API_URL, $httpProvider, localStorageServiceProvider) {
                $urlRouterProvider.otherwise('/login');
                $locationProvider.html5Mode(false);
                uiSelectConfig.theme = 'bootstrap';
                $httpProvider.interceptors.push('httpInterceptor');

                $provide.value('baseURL', API_URL);
                RestangularProvider.setBaseUrl(API_URL + '/1.0/');
            }
        ])
        .run(['$rootScope', '$state', 'usSpinnerService', 'deviceDetector', '$window', function($rootScope, $state, usSpinnerService, deviceDetector, $window) {
            $rootScope.$state = $state;

            $rootScope.$on('loading:progress', function() {
                usSpinnerService.spin('spinner-1');
            });

            $rootScope.$on('loading:finish', function() {
                usSpinnerService.stop('spinner-1');
            });

            var deviceDetector = deviceDetector;

            if (deviceDetector.isMobile() && !deviceDetector.isTablet()) {
                $window.location.href = "./mobile/index.html";
            } else if (deviceDetector.isMobile() && deviceDetector.isTablet()) {
                $window.location.href = "./mobile/index.html";
            }
        }])
        .factory('_', ['$window', function($window) {
            return $window._;
        }])
        .factory('httpInterceptor', ['$q', '$rootScope',
            function($q, $rootScope) {
                var loadingCount = 0;

                return {
                    request: function(config) {
                        if (++loadingCount === 1) $rootScope.$broadcast('loading:progress');
                        return config || $q.when(config);
                    },

                    response: function(response) {
                        if (--loadingCount === 0) $rootScope.$broadcast('loading:finish');
                        return response || $q.when(response);
                    },

                    responseError: function(response) {
                        if (--loadingCount === 0) $rootScope.$broadcast('loading:finish');
                        return $q.reject(response);
                    }
                };
            }
        ]);

})();

(function() {
    'use strict';

    angular.module('contractor')
        .factory('apiFactory', apiFactory);

    apiFactory.$inject = ['Restangular', 'API_URL', 'API_VERSION'];

    function apiFactory(Restangular, API_URL, API_VERSION) {

    }


})();

(function() {
    'use strict';
    angular.module('contractor')
        .factory('CurrentUser', ['localStorageService', function(localStorageService) {
            return {
                user: function() {
                    var accnt = JSON.parse(localStorageService.get('user')) || {};
                    if (!_.isEmpty(accnt)) {
                        return accnt;
                    } else {
                        return null;
                    }
                },
                logout: function() {
                    var accnt = JSON.parse(localStorageService.get('user')) || {};
                    if (!_.isEmpty(accnt)) {
                        return localStorageService.remove('user');
                    } else {
                        return null;
                    }
                }
            };
        }])
        .factory('Reports', function() {
            var reports = [{
                id: 1,
                Title: 'Network Setup',
                Description: '7-Eleven',
                Status: 'High',
                location: 'Sydney CDB',
                datecompleted: '2016-01-01',
                client: '7-Eleven'
            }, {
                id: 2,
                Title: 'AV-Installation',
                Description: 'Telstra,Melbourne',
                Status: 'Medium',
                location: 'Sydney CDB',
                datecompleted: '2016-01-01',
                client: '7-Eleven'
            }, {
                id: 2,
                Title: 'Hardware-Installation',
                Description: 'Telstra,Melbourne',
                Status: 'Medium',
                location: 'Sydney CDB',
                datecompleted: '2016-01-01',
                client: '7-Eleven'
            }];

            return {
                all: function() {
                    return reports;
                }
            };
        })
        .factory('TaskTypes', function() {
            var reports = [{
                id: 1,
                name: 'Installation',
                value: 'Installation'
            }, {
                id: 2,
                name: 'Setup',
                value: 'Setup'
            }, {
                id: 3,
                name: 'Testing',
                value: 'Testing'
            }, {
                id: 4,
                name: 'Support',
                value: 'Support'
            }];

            var priorities = [{
                id: 1,
                name: 'High',
                value: 'High'
            }, {
                id: 1,
                name: 'Medium',
                value: 'Medium'
            }, {
                id: 1,
                name: 'Low',
                value: 'Low'
            }];

            return {
                all: function() {
                    return reports;
                },
                priorities: function() {
                    return priorities;
                }
            };
        })
        .factory('WeekDays', function() {
            var chats = [{
                id: 1,
                name: 'Sunday',
                abbr: 'SUN'
            }, {
                id: 2,
                name: 'Monday',
                abbr: 'MON'
            }, {
                id: 3,
                name: 'Tuesday',
                abbr: 'TUE'
            }, {
                id: 4,
                name: 'Wednesday',
                abbr: 'WED'
            }, {
                id: 5,
                name: 'Thursday',
                abbr: 'THU'
            }, {
                id: 6,
                name: 'Friday',
                abbr: 'FRI'
            }, {
                id: 7,
                name: 'Saturday',
                abbr: 'SAT'
            }];

            return {
                all: function() {
                    return chats;
                },
                get: function(chatId) {
                    for (var i = 0; i < chats.length; i++) {
                        if (chats[i].id === parseInt(chatId)) {
                            return chats[i];
                        }
                    }
                    return null;
                }
            };
        })
        .factory('States', function() {
            var states = [{
                id: 1,
                code: 'ACT',
                name: 'Australian Capital Territory'
            }, {
                id: 2,
                code: 'NSW',
                name: 'New South Wales'
            }, {
                id: 3,
                code: 'NT',
                name: 'Northern Territory'
            }, {
                id: 4,
                code: 'QLD',
                name: 'Queensland'
            }, {
                id: 5,
                code: 'SA',
                name: 'South Australia'
            }, {
                id: 6,
                code: 'TAS',
                name: 'Tasmania'
            }, {
                id: 7,
                code: 'VIC',
                name: 'Victoria'
            }, {
                id: 8,
                code: 'WA',
                name: 'Western Australia'
            }];

            return {
                all: function() {
                    return states;
                },
                get: function(stateId) {
                    var result = _.find({ 'id': stateId }, states);
                    if (!_.isEmpty(result)) {
                        return result;
                    } else {
                        return null;
                    }
                }
            };
        })
        .factory('Qualifications', function() {
            var countries = [{
                id: 1,
                value: 'one',
                name: 'Hardware Installations'
            }, {
                id: 2,
                value: 'two',
                name: 'AV-Installations'
            },{
                id: 3,
                value: 'three',
                name: 'Preventive Maintenance'
            },{
                id: 4,
                value: 'four',
                name: 'Digital Media and Digital Points of Purchase Rollouts'
            },{
                id: 5,
                value: 'five',
                name: 'Basic Networking Experience'
            },{
                id: 6,
                value: 'six',
                name: 'Testing and Servicing Equipment'
            }];

            return {
                all: function() {
                    return countries;
                }
            };
        })
        .factory('Country', function() {
            var countries = [{
                id: 1,
                code: 'AUS',
                name: 'Australia'
            }, {
                id: 2,
                code: 'NZ',
                name: 'New Zealand'
            }];

            return {
                all: function() {
                    return countries;
                },
                get: function(stateId) {
                    for (var i = 0; i < countries.length; i++) {
                        if (countries[i].id === parseInt(stateId)) {
                            return countries[i];
                        }
                    }
                    return null;
                }
            };
        })
        .factory('CityState', ['$http', function($http) {
            return {
                all: function(state) {
                    if (state == 'ACT') {
                        console.log('state: ', state);
                        return $http.get('./data/act.json').success(function(data) {
                            return data;
                        });
                    } else if (state == 'NSW') {
                        return $http.get('./data/nsw.json').success(function(data) {
                            return data;
                        });
                    } else if (state == 'NT') {
                        return $http.get('./data/nt.json').success(function(data) {
                            return data;
                        });
                    } else if (state == 'QLD') {
                        return $http.get('./data/qld.json').success(function(data) {
                            return data;
                        });
                    } else if (state == 'SA') {
                        return $http.get('./data/sa.json').success(function(data) {
                            return data;
                        });
                    } else if (state == 'VIC') {
                        return $http.get('./data/vic.json').success(function(data) {
                            return data;
                        });
                    } else if (state == 'WA') {
                        return $http.get('./data/wa.json').success(function(data) {
                            return data;
                        });
                    }
                },
                get: function(stateId) {

                }
            };
        }])
        .factory('Banks', ['$http', function($http) {
            return {
                all: function() {
                    return $http.get('./data/bank.json').success(function(data) {
                        return data;
                    });
                },
                get: function(bankId) {
                    return $http.get('./data/bank.json').success(function(data) {
                        return data;
                    });
                }
            };
        }])
        .factory('Currencies', ['$http', function($http) {
            return {
                all: function() {
                    return $http.get('./data/currency.new.json').success(function(data) {
                        return data;
                    });
                },
                get: function(bankId) {
                    return $http.get('./data/currency.new.json').success(function(data) {
                        return data;
                    });
                }
            };
        }]);

})();

(function() {
    'use strict';

    angular.module('contractor')
        .factory('Contractors', ['$q', 'localStorageService', function($q, localStorageService) {

            return {
                findAll: function(params) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('contactor')) || [];

                        if (oldRecords && oldRecords.length > 0) {
                            if (_.isEmpty(params)) {
                                returnArr = oldRecords;
                                deferred.resolve(returnArr);
                            } else {
                                returnArr = _.filter(oldRecords, params);
                                deferred.resolve(returnArr);
                            }
                        } else {
                            deferred.resolve(returnArr);
                        }
                    }
                    return deferred.promise;
                },

                create: function(data) {
                    var deferred = $q.defer();

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        data._id = guid();

                        var oldRecords = JSON.parse(localStorageService.get('contactor')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            oldRecords.push(data);

                            var JSONData = JSON.stringify(oldRecords);
                            var resp = localStorageService.set('contactor', JSONData);
                            deferred.resolve(resp);
                        } else {
                            var JSONData = JSON.stringify([data]);
                            var resp = localStorageService.set('contactor', JSONData);
                            deferred.resolve(resp);
                        }
                    }
                    return deferred.promise;
                },

                remove: function() {
                    var deferred = $q.defer();
                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var resp = localStorageService.remove('contactor');
                        deferred.resolve(resp);
                    }
                    return deferred.promise;
                },

                findById: function(_id) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('contactor')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            returnArr = _.filter(oldRecords, { '_id': _id });
                            deferred.resolve(returnArr);
                        } else {
                            deferred.resolve(returnArr);
                        }
                    }
                    return deferred.promise;
                },

                findByIdAndRemove: function(_id) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('contactor')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            returnArr = _.filter(oldRecords, function(selectedData) {
                                return selectedData._id !== quotes._id;
                            });
                            deferred.resolve(returnArr);
                        } else {
                            deferred.resolve(returnArr);
                        }
                    }
                    return deferred.promise;
                },

                findByIdAndUpdate: function(_id, data) {
                    var deferred = $q.defer();

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('contactor')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            _.each(oldRecords, function(row) {
                                if (row._id == _id) {
                                    row = data;
                                }
                            });

                            var JSONData = JSON.stringify(oldRecords);
                            var resp = localStorageService.set('contactor', JSONData);
                            deferred.resolve(resp);
                        } else {
                            deferred.resolve([]);
                        }
                    }
                    return deferred.promise;
                },

                login: function(uname, password) {
                    var oldRecords = JSON.parse(localStorageService.get('contactor')) || [];
                    var result = _.find(oldRecords, { 'username': uname, 'password': password });
                    if (!_.isEmpty(result)) {
                        delete result.password;
                        localStorageService.set('user', JSON.stringify(result));
                        return result;
                    } else {
                        return null;
                    }
                }
            };
        }]);

})();

(function() {
    'use strict';

    angular.module('contractor')
        .factory('ProcurementManager', ['localStorageService', function(localStorageService) {
            var managers = [{
                id: 1,
                fname: 'John',
                lname: 'Doe',
                position: 'Project Lead',
                location: {
                    address: 'Lorem ipsum dolor sit amet',
                    postcode: '12345',
                    city: 'Haymarket',
                    state: 'New South Wales',
                    country: 'Australia'
                },
                contactnum: '0411123236',
                email: 'loren@impatsu.com.au',
                username: 'lorem1',
                password: '123456',
                usertype: 'proc',
                datecreated: new Date()
            }, {
                id: 2,
                fname: 'Mary',
                lname: 'Poppins',
                position: 'Project Lead',
                location: {
                    address: 'Lorem ipsum dolor sit amet',
                    postcode: '12345',
                    city: 'Haymarket',
                    state: 'New South Wales',
                    country: 'Australia'
                },
                contactnum: '0411123236',
                email: 'loren2@impatsu.com.au',
                username: 'lorem2',
                password: '123456',
                usertype: 'proc',
                datecreated: new Date()
            }, {
                id: 3,
                fname: 'Network',
                lname: 'Eleven',
                position: 'Project Lead',
                location: {
                    address: 'Lorem ipsum dolor sit amet',
                    postcode: '12345',
                    city: 'Haymarket',
                    state: 'New South Wales',
                    country: 'Australia'
                },
                contactnum: '0411123236',
                email: 'loren3@impatsu.com.au',
                username: 'lorem3',
                password: '123456',
                usertype: 'proc',
                datecreated: new Date()
            },{
                id: 4,
                fname: 'Katrin',
                lname: 'Risse',
                position: 'Project Lead',
                location: {
                    address: 'Lorem ipsum dolor sit amet',
                    postcode: '12345',
                    city: 'Haymarket',
                    state: 'New South Wales',
                    country: 'Australia'
                },
                contactnum: '0411123236',
                email: 'katrin.risse@engagis.com.au',
                username: 'katrin.risse',
                password: '123456',
                usertype: 'proc',
                datecreated: new Date()
            }];

            return {
                all: function() {
                    return managers;
                },
                login: function(uname, password) {
                    var result = _.find(managers, { 'username': uname, 'password': password });
                    if (!_.isEmpty(result)) {
                        localStorageService.set('user', JSON.stringify(result));
                        return result;
                    } else {
                        return null;
                    }
                },
                findById: function(_id) {
                    var result = _.find(managers, { 'id': _id });
                    if (!_.isEmpty(result)) {
                        return result;
                    } else {
                        return null;
                    }
                }
            };
        }]);

})();

(function() {
    'use strict';

    angular.module('contractor')
        .factory('Tasks', ['$q', 'localStorageService', function($q, localStorageService) {
            var self = this;

            function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                    s4() + '-' + s4() + s4() + s4();
            }

            return {
                find: function(params) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('tasks')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            if (_.isEmpty(params)) {
                                returnArr = oldRecords;
                                deferred.resolve(returnArr);
                            } else {
                                returnArr = _.filter(oldRecords, params);
                                deferred.resolve(returnArr);
                            }
                        } else {
                            deferred.resolve(returnArr);
                        }
                    }
                    return deferred.promise;
                },

                create: function(data) {
                    var deferred = $q.defer();
                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        data._id = guid();

                        var oldRecords = JSON.parse(localStorageService.get('tasks')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            oldRecords.push(data);

                            var JSONData = JSON.stringify(oldRecords);
                            var resp = localStorageService.set('tasks', JSONData);
                            deferred.resolve(resp);
                        } else {
                            var JSONData = JSON.stringify([data]);
                            var resp = localStorageService.set('tasks', JSONData);
                            deferred.resolve(resp);
                        }
                    }
                    return deferred.promise;
                },

                remove: function() {
                    var deferred = $q.defer();
                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var resp = localStorageService.remove('tasks');
                        deferred.resolve(resp);
                    }
                    return deferred.promise;
                },

                findById: function(_id) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('tasks')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            returnArr = _.filter(oldRecords, { '_id': _id });
                            deferred.resolve(returnArr);
                        } else {
                            deferred.resolve(returnArr);
                        }
                    }
                    return deferred.promise;
                },

                findByIdAndRemove: function(_id) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('tasks')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            returnArr = _.filter(oldRecords, function(selectedData) {
                                return selectedData._id !== quotes._id;
                            });
                            deferred.resolve(returnArr);
                        } else {
                            deferred.resolve(returnArr);
                        }
                    }
                    return deferred.promise;
                },

                findByIdAndUpdate: function(_id, data) {
                    var deferred = $q.defer();
                    var returnArr = [];

                    if (!localStorageService.isSupported) {
                        deferred.reject('localStorage is not supported');
                    } else {
                        var oldRecords = JSON.parse(localStorageService.get('tasks')) || [];
                        if (oldRecords && oldRecords.length > 0) {
                            returnArr = _.filter(oldRecords, function(selectedData) {
                                return selectedData._id !== _id;
                            });
                            returnArr.push(data);
                            // console.log('returnArr: ',returnArr);

                            var JSONData = JSON.stringify(returnArr);
                            var resp = localStorageService.set('tasks', JSONData);
                            deferred.resolve(resp);
                        } else {
                            deferred.resolve([]);
                        }
                    }
                    return deferred.promise;
                }
            }
        }]);

})();

(function() {
    'use strict';
    angular.module('contractor')
        .factory('Dummy', function() {

            function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                    s4() + '-' + s4() + s4() + s4();
            }


            function randomString(len, charSet) {
                charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                var randomString = '';
                for (var i = 0; i < len; i++) {
                    var randomPoz = Math.floor(Math.random() * charSet.length);
                    randomString += charSet.substring(randomPoz, randomPoz + 1);
                }
                return randomString;
            }

            return {
                task: function() {
                    return {
                        _id: guid(),
                        taskname: 'Task -' + Math.round(+new Date() / 1000),
                        tasktype: 'Support',
                        description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.',
                        storename: 'Target Newton',
                        location: 'Gorge Rd, Newton SA 5074, Australia',
                        deadline: '2016-07-14',
                        start: '8:00 AM',
                        end: '3:00 PM',
                        numdays: 0,
                        numhours: 1,
                        priority: 'High',
                        projectname: 'Bupa Retail - ' + Math.round(+new Date() / 1000),
                        casenumber: 102807,
                        requestor: 'Mardy Romasasa',
                        data_requested: '2016-07-14',
                        storelname: 'Jobs',
                        storefname: 'Steve',
                        storeconnum: '08 8168 7500',
                        contractors: [],
                        status: ''
                    }
                },
                report: function(){
                    return {
                        
                    }
                },
                vendorinfo: function() {
                    var lname = 'last' + randomString(2);
                    var fname = 'first' + randomString(2);
                    return {
                        _id: guid(),
                        lname: lname,
                        fname: fname,
                        username: lname + '.' + fname,
                        password: '123456',
                        companyname: 'Company-' + randomString(8),
                        location: 'Gorge Rd, Newton SA 5074, Australia',
                        country: 'AUS',
                        state: 'NSW',
                        city: 'Haymarket',
                        address: 'Gorge Rd, Newton SA 5074',
                        postcode: (Math.floor(Math.random() * 9000) + 1000),
                        phone: '61' + (Math.floor(Math.random() * 9000000000) + 1000000000),
                        abn: (Math.floor(Math.random() * 90000000000) + 10000000000),
                        email: 'sample' + (Math.floor(Math.random() * 900) + 100) + '@yopmail.com',
                        seclname: 'LName' + randomString(8),
                        secfname: 'FName' + randomString(8),
                        secphone: parseInt('61' + (Math.floor(Math.random() * 9000000000) + 1000000000)),
                        secemail: 'email' + (Math.floor(Math.random() * 900) + 100) + '@yopmail.com',
                        usertype: 'con',
                    }
                },
                vendorrate: function() {
                    return {
                        ratestandard: 12.5,
                        other_base_hours: 12.5,
                        other_after_hours: 12.5,
                        other_weekends: 12.5,
                        currency: 'AUD',
                        check_postcode: (Math.floor(Math.random() * 9000) + 1000),
                        check_address: 'Gorge Rd, Newton SA 5074, Australia',
                        check_country: 'AUS',
                        check_state: 'NSW',
                        check_city: 'Haymarket',
                        bankname: 'Advance Bank',
                        bankbranch: randomString(12),
                        bankaccount: 'FName' + randomString(8) + ' LName' + randomString(8),
                        bankaccountnum: (Math.floor(Math.random() * 900) + 100).toString() + (Math.floor(Math.random() * 900) + 100).toString() + (Math.floor(Math.random() * 900) + 100).toString() + (Math.floor(Math.random() * 900).toString() + 100) + (Math.floor(Math.random() * 900) + 100).toString(),
                        bankbsb: (Math.floor(Math.random() * 900000) + 100000)
                    }
                },
                vendorqualification: function() {
                    return {
                        refLname: 'LName' + randomString(8),
                        refFname: 'FName' + randomString(8),
                        refPhone: '61' + (Math.floor(Math.random() * 9000000000) + 1000000000),
                        refEmail: 'email' + (Math.floor(Math.random() * 900) + 100) + '@yopmail.com',
                        qualifications: [{
                            id: 1,
                            value: 'one',
                            name: 'Hardware Installations',
                            checked: false
                        }, {
                            id: 2,
                            value: 'two',
                            name: 'AV-Installations',
                            checked: true
                        }, {
                            id: 3,
                            value: 'three',
                            name: 'Preventive Maintenance',
                            checked: false
                        }, {
                            id: 4,
                            value: 'four',
                            name: 'Digital Media and Digital Points of Purchase Rollouts',
                            checked: true
                        }, {
                            id: 5,
                            value: 'five',
                            name: 'Basic Networking Experience',
                            checked: true
                        }, {
                            id: 6,
                            value: 'six',
                            name: 'Testing and Servicing Equipment',
                            checked: false
                        }]
                    }
                }
            };
        });

})();

(function() {
    'use strict';

    angular.module('contractor')
        .config(config)
        .directive('appHeader', appHeader)
        .controller('MainCtrl', MainCtrl);

    config.$inject = ['$stateProvider', '$urlRouterProvider'];

    function config($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('login', {
                url: '/login',
                templateUrl: 'modules/main/login.html',
                controller: 'MainCtrl'
            })
            .state('vendorinfo', {
                url: '/vendorinfo',
                templateUrl: 'modules/application/vendorInfo.html',
                controller: 'VendorInfoCtrl'
            })
            .state('qualification', {
                url: '/qualification',
                templateUrl: 'modules/application/qualification.html',
                controller: 'vendorQualificationCtrl'
            })
            .state('payment', {
                url: '/payment',
                templateUrl: 'modules/application/payment.html',
                controller: 'vendorRatetCtrl'
            })
            .state('terms', {
                url: '/terms',
                templateUrl: 'modules/main/termscondition.html',
                controller: 'MainCtrl'
            })
            .state('applicsent', {
                url: '/applicationsent',
                templateUrl: 'modules/main/applicsent.html',
                controller: 'MainCtrl'
            })
            .state('dashboard', {
                url: '/dashboard',
                templateUrl: 'modules/main/dash.html',
                controller: 'dashCtrl'
            })
            .state('dashtabs', {
                url: '/dashboardtabs',
                templateUrl: 'modules/main/dashtabs.html',
                controller: 'dashCtrl'
            });
    }

    function appHeader() {
        return {
            restrict: 'E',
            templateUrl: './modules/main/header.html',
            compile: function(tElement, tAttrs, transclude) {
                $.AdminLTE.pushMenu($(tElement).find('.sidebar-toggle'));
            }
        };
    }

    MainCtrl.$inject = ['$scope', 'Upload', '$timeout', 'ngDialog', '$state','toastr', 'ProcurementManager', 'Contractors' ];

    function MainCtrl($scope, Upload, $timeout, ngDialog, $state, toastr, ProcurementManager, Contractors) {
        $scope.input = [];
        $scope.inputs = [];
        $scope.test = {};
        $scope.data = {};
        $scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;
        $scope.location = {};
        $scope.ratesList = [];
        $scope.rates = {};
        $scope.loading = false;

        $scope.settings = {
            default: function() {
                var date = new Date();
                return date;
            }
        };

        $timeout(function() {
            $scope.loading = true;
        }, 1500);

        $scope.data = {};
        $scope.data.availabilityArr = [];
        $scope.data.coverageArr = [];

        $scope.avail = {};
        $scope.area = {};

        $scope.clickToCancel = function() {
            console.log('clickToCancel')
            ngDialog.openConfirm({
                templateUrl: 'modules/main/dialog/cancel.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };

        $scope.submitForm = function() {


            if ($scope.userForm.$valid) {
                $state.go('payment');
            }

        };

        $scope.onApplyTimePicker = function() {
            console.log('Time range applied.');
        };
        $scope.onClearTimePicker = function() {
            console.log('Time range current operation cancelled.');
        };
        $scope.baseRate = [{
            id: 0,
            value: 'Monday'
        }, {
            id: 1,
            value: 'Tuesday'
        }, {
            id: 2,
            value: 'Wednesday'
        }, {
            id: 3,
            value: 'Thursday'
        }, {
            id: 4,
            value: 'Friday'
        }, {
            id: 5,
            value: 'Saturday'
        }, {
            id: '6',
            value: 'Sunday'
        }];

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
        };
        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
        };
        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };
        $scope.showCard3 = function() {
            $scope.showthirdCard = true;
        };
        $scope.addSched = function() {
            $scope.inputs.push({});
        };
        $scope.addLocation = function() {
            $scope.input.push({});
        };

        $scope.onApplyTimePicker = function() {
            console.log('Time range applied.');
        };
        $scope.onClearTimePicker = function() {
            console.log('Time range current operation cancelled.');
        };
        $scope.addArea = function(item) {
            if (item) {
                $scope.data.coverageArr.push({
                    area: item
                });
                $scope.area.coverage = '';
            }
        };

        $scope.uploadPic = function(file) {
            file.upload = Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                data: { username: $scope.username, file: file },
            });

            file.upload.then(function(response) {
                $timeout(function() {
                    file.result = response.data;
                });
            }, function(response) {
                if (response.status > 0)
                    $scope.errorMsg = response.status + ': ' + response.data;
            }, function(evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };

        $scope.login = function() {            

            if (!_.isEmpty($scope.data.username) && !_.isEmpty($scope.data.password)) {
                var result = ProcurementManager.login($scope.data.username, $scope.data.password);
                var result2 = Contractors.login($scope.data.username, $scope.data.password);
                console.log("result-> ", result);
                console.log("result2-> ", result2);
                if (!_.isNull(result)) {
                    $timeout(function() {
                        toastr.success('success');
                        
                        $state.go('main.admindash');
                    }, 1000);
                    return;
                } else if (!_.isNull(result2)) {
                    $timeout(function() {
                        toastr.success('success');

                        $state.go('main.admindash');
                    }, 1000);
                    return;
                } else {
                    if (_.isNull(result)) {
                        $timeout(function() {
                            toastr.error('Username and Password not match!!!','Invalid Account');
                            return;
                        }, 600);
                    } else if (_.isNull(result2)) {
                        $timeout(function() {                            
                            toastr.error('Username and Password not match!!!','Invalid Account');
                            return;
                        }, 600);
                    }
                }
            } else {
                toastr.error('Username and Password are required!!!', 'Error');                
            }
        }

    }


})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('qualificationCtrl', qualificationCtrl);

    qualificationCtrl.$inject = ['$scope', 'FileUploader', 'ngDialog'];

    function qualificationCtrl($scope, FileUploader, ngDialog) {
        $scope.othersList = [];
        $scope.others = {};

        $scope.clickToCancel = function() {
            console.log('clickToCancel')
            ngDialog.openConfirm({
                 title: 'sdsdsd',
                templateUrl: 'modules/main/dialog/cancel.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };
        $scope.clickToOpen = function() {
            console.log('clickToOpen')
            ngDialog.openConfirm({
                title: '',
                templateUrl: 'modules/main/dialog/submit.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };
        

        $scope.addOthers = function(task) {
            if (!_.isEmpty(task)) {
                $scope.othersList.push(task);
                $scope.others = {};
            }
        };

        $scope.removeOther = function(index) {
            $scope.othersList.splice(index, 1);
        };

        var uploader = $scope.uploader = new FileUploader({

        });

        // FILTERS

        uploader.filters.push({
            name: 'customFilter',
            fn: function(item /*{File|FileLikeObject}*/ , options) {
                return this.queue.length < 10;
            }
        });
        var uploader1 = $scope.uploader1 = new FileUploader({

        });

        // FILTERS

        uploader1.filters.push({
            name: 'customFilter',
            fn: function(item /*{File|FileLikeObject}*/ , options) {
                return this.queue.length < 10;
            }
        });
    }

})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('paymentCtrl', paymentCtrl);

    paymentCtrl.$inject = ['$scope', 'ngDialog', '$filter', '$state', 'Banks'];

    function paymentCtrl($scope, ngDialog, $filter, $state, Banks) {

        console.log('paymentCtrl: ');

        $scope.data = {};
        $scope.rate = {};

        $scope.inputs = [];
        $scope.test = {};
        $scope.data = {};
        $scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;

        $scope.ratesList = [];
        $scope.rates = {};

        $scope.banks = [];
        $scope.banksCopy = [];

        $scope.baseRate = [{
            id: 0,
            value: 'Base Rate'
        }, {
            id: 1,
            value: 'After Hours'
        }, {
            id: '2',
            value: 'Weekend'
        }];

        $scope.clickToOpen = function() {
            console.log('clickToOpen')
            ngDialog.openConfirm({
                templateUrl: 'modules/main/dialog/submit.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };
        $scope.clickToCancel = function() {
            console.log('clickToCancel')
            ngDialog.openConfirm({
                templateUrl: 'modules/main/dialog/cancel.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
        };

        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
        };

        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };

        $scope.showCard3 = function() {
            $scope.showthirdCard = true;
        };
        $scope.addSched = function() {
            $scope.inputs.push({});
        };
        // $scope.addRates = function(rate) {
        //     console.log('addRates: ',rate);
        //     if (!_.isEmpty(rate)) {
        //         $scope.ratesList.push(rate);
        //         $scope.rates = {};
        //     }
        // };

        $scope.removeOther = function(index) {
            $scope.ratesList.splice(index, 1);
        };

        Banks.all().then(function(resp) {
            $scope.banks = resp.data;

            _.each($scope.banks, function(row) {
                $scope.banksCopy.push({
                    id: row.id,
                    name: row.name,
                    view: row.name
                });
            });
        });

        $scope.selectedCountry = function($item) {
            console.log($item.description.id);
            console.log($item.originalObject );
        };

        $scope.proceedNext = function() {
            $state.go('qualification');
        };

    }
})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('dashCtrl', dashCtrl);

    dashCtrl.$inject = ['$scope'];

    function dashCtrl($scope) {
    	$scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
            $scope.showthirdCard = false;
        };
        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
            $scope.showthirdCard = false;
        };
        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };
        $scope.hideCard3 = function() {
            $scope.showthirdCard = true;
            $scope.showsecondCard = false;
            $scope.showstartCard = false;
        };

    }
})();

(function() {
    'use strict';

    angular.module('contractor')
        .config(config)
        .controller('AdminCtrl', AdminCtrl);

    config.$inject = ['$stateProvider', '$urlRouterProvider'];

    function config($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('main', {
                url: '/main',
                templateUrl: 'modules/admin/main.html',
                controller: 'adminmainCtrl',
                abstract: true
            })
            .state('main.admindash', {
                url: '/admindashboard',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/admiindashboard.html',
                        controller: 'admindashCtrl'
                    }
                }
            })
            .state('main.admintask', {
                url: '/admintask',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/admintask.html',
                        controller: 'admintaskCtrl'
                    }
                }

            })
            .state('main.newtasklist', {
                url: '/admintask/newtasklist',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/newtasklist.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.taskinprogresslist', {
                url: '/admintask/taskinprogresslist',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/taskinprogresslist.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.pendingtasklist', {
                url: '/admintask/pendingtasklist',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/pendingtasklist.html',
                        controller: 'admintaskCtrl'
                    }
                }

            })
            .state('main.completedtasklist', {
                url: '/admintask/completedtasklist',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/completedtasklist.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.taskdetails', {
                url: '/admintask/:taskId/taskdetails',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/taskdetails.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.completedtask', {
                url: '/admintask/completed',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/completedtask.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.forapprovaltask', {
                url: '/admintask/:taskId/forapproval',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/forapprovaltask.html',
                        controller: 'admintaskCtrl'
                    }
                }

            })
            .state('main.qowlist', {
                url: '/admintask/:taskId/qowlist',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/qowlist.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.adminreports', {
                url: '/adminreports',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/adminreports.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.supportreport', {
                url: '/adminreports/supportreport',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/supportreport.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.sitesurveyreport', {
                url: '/adminreports/sitesurveyreport',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/sitesurveyreport.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            .state('main.userprofile', {
                url: '/adminreports/userprofile',
                views: {
                    'main-view': {
                        templateUrl: 'modules/admin/userprofile.html',
                        controller: 'admindashCtrl'
                    }
                }

            })
            // .state('Admindashboard', {
            //     url: '/Admindashboard',
            //     templateUrl: 'modules/admin/admiindashboard.html',
            //     data: {
            //         css: 'styles/style2.css',

        //     },
        //     controller: 'admintaskCtrl'

        // })
        ;
    }


    AdminCtrl.$inject = ['$scope'];

    function AdminCtrl($scope) {
        //TODO
        $scope.test = {};
        $scope.data = {};
        $scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
        };
        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
        };
        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };
        $scope.showCard3 = function() {
            $scope.showthirdCard = true;
        };
    }


})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('admindashCtrl', ['$scope', '$state', '$uibModal', '$log', 'FileUploader', '$timeout', '$location', '$anchorScroll', 'Upload', 'Tasks', 'CurrentUser', 'Reports', '$stateParams', 'Contractors', 'ngDialog', 'toastr',
            function($scope, $state, $uibModal, $log, FileUploader, $timeout, $location, $anchorScroll, Upload, Tasks, CurrentUser, Reports, $stateParams, Contractors, ngDialog, toastr) {
                $scope.newdate = new Date();
                $scope.showstartCard = true;
                $scope.showsecondCard = false;
                $scope.showthirdCard = false;
                $scope.items = ['item1', 'item2', 'item3'];
                $scope.animationsEnabled = true;
                $scope.toggle = true;
                $scope.toggle2 = true;
                $scope.totalItems = 64;
                $scope.currentPage = 1;
                $scope.maxSize = 5;
                $scope.bigTotalItems = 175;
                $scope.bigCurrentPage = 1;
                $scope.loading = true;

                $scope.task = {};
                $scope.progressData = [];
                $scope.pendingData = [];
                $scope.completedData = [];
                $scope.newTaskData = [];

                $scope.reportsData = [];

                $scope.tasklist = [];


                if ($stateParams.taskId) {
                    Tasks.findById($stateParams.taskId).then(function(data) {
                        $scope.task = data[0];
                    });
                    $scope.$watch('task', function(newValue) {
                        $scope.task = newValue;
                        console.log('$scope.quotes: ', $scope.task.quotes);

                        _.each($scope.task.quotes, function(row) {
                            var total2 = 0;
                            _.each(row.descriptions, function(row1) {
                                total2 += parseFloat(row1.rate);
                            });
                            row.grossothers = total2;

                            row.totalothers = parseFloat(row.material_fee) + parseFloat(row.parking_fee) + parseFloat(row.travel_fee) + parseFloat(row.grossothers);
                        });
                    });
                } else {
                    // $scope.task = Dummy.task();
                    $scope.task = {};
                    $scope.task.contractors = [];

                    // $scope.taskTypes = TaskTypes.all();
                    // $scope.priorities = TaskTypes.priorities();

                    $scope.contractorData = [];
                    $scope.contractors = [];

                    Contractors.findAll().then(function(data) {
                        $scope.contractorData = data;
                        _.each($scope.contractorData, function(row) {
                            row.checked = false;
                        });

                        for (var i = 0; i <= 2; i++) {
                            if (!_.isUndefined($scope.contractorData[i])) {
                                $scope.contractors.push($scope.contractorData[i]);
                            }
                        }
                    },function(error){
                        console.log('error: ',error);
                    });

                }

                Tasks.find().then(function(data) {
                    _.each(data, function(row) {
                        if (row.reporter.id == CurrentUser.user().id) {
                            $scope.tasklist.push(row);
                            console.log('row: ', row._id);
                        }
                    });
                });

                $scope.$watch('tasklist', function(tasklist) {

                    $scope.newTaskData = tasklist;

                    // console.log('$scope.newTaskData: ', $scope.newTaskData);

                    _.each($scope.newTaskData, function(row) {
                        var pending = 0;
                        var completed = 0;
                        var progress = 0;


                        _.each(row.quotes, function(row1) {
                            if (row1.approved && row1.status != 'progress' && row1.status != 'completed') {
                                pending++;
                            }

                            if (row1.approved && row1.status == 'progress') {
                                progress++;
                            }

                            if (row1.approved && row1.status == 'completed') {
                                completed++;
                            }

                            if (!_.isUndefined(row1.check) && row1.check == 'in') {
                                row.checkStatus = 'in';
                            } else if (!_.isUndefined(row1.check) && row1.check == 'out') {
                                row.checkStatus = 'out';
                            }
                        });

                        if (pending > 0) {
                            $scope.pendingData.push(row);
                            pending = 0;
                        }

                        if (progress > 0) {
                            $scope.progressData.push(row);
                            progress = 0;
                        }

                        if (completed > 0) {
                            $scope.completedData.push(row);
                            completed = 0;
                        }
                    });

                    _.each($scope.pendingData, function(row) {
                        _.remove($scope.newTaskData, function(selectedData) {
                            return selectedData._id == row._id;
                        });
                    });

                    _.each($scope.progressData, function(row) {
                        _.remove($scope.newTaskData, function(selectedData) {
                            return selectedData._id == row._id;
                        });

                        _.remove($scope.pendingData, function(selectedData) {
                            return selectedData._id == row._id;
                        });

                        _.remove($scope.completedData, function(selectedData) {
                            return selectedData._id == row._id;
                        });
                    });

                    _.each($scope.completedData, function(row) {
                        _.remove($scope.newTaskData, function(selectedData) {
                            return selectedData._id == row._id;
                        });
                    });

                    /* console.log('$scope.newTaskData: ', $scope.newTaskData);
                     console.log('$scope.pendingData: ', $scope.pendingData);
                     console.log('$scope.progressData: ', $scope.progressData);
                     console.log('$scope.completedData: ', $scope.completedData);*/
                    $scope.$broadcast('scroll.refreshComplete');
                });

                $scope.reportsData = Reports.all();
                console.log($scope.reportsData);

                $scope.scrollTo = function(id) {
                    $location.hash(id);
                    console.log($location.hash());
                    $anchorScroll();
                };

                $timeout(function() {
                    $scope.loading = false;
                }, 1500);

                $scope.setPage = function(pageNo) {
                    $scope.currentPage = pageNo;
                };

                $scope.pageChanged = function() {
                    $log.log('Page changed to: ' + $scope.currentPage);
                };

                $scope.$watch('toggle', function() {
                    $scope.toggleText = $scope.toggle ? 'More' : 'Less';
                });

                $scope.$watch('toggle2', function() {
                    $scope.toggleText2 = $scope.toggle2 ? 'More' : 'Less';
                });


                var uploader = $scope.uploader = new FileUploader({

                });
                uploader.filters.push({
                    name: 'customFilter',
                    fn: function(item /*{File|FileLikeObject}*/ , options) {
                        return this.queue.length < 10;
                    }
                });

                $scope.deTails = function(list) {
                    console.log(list);
                    $state.go('main.forapprovaltask', { taskId: list._id });
                };

                $scope.showConfirm = function(qoute) {

                    ngDialog.openConfirm({
                        title: '',
                        templateUrl: 'modules/main/dialog/submitQuote.html',
                        className: 'ngdialog-theme-default',
                        scope: $scope
                    }).then(function() {
                        console.log('YES');

                        _.each($scope.task.quotes, function(row) {
                            if (row._id == qoute._id) {
                                row.approved = true;
                            }
                        });

                        Tasks.findByIdAndUpdate($stateParams.taskId, $scope.task).then(function(resp) {
                            console.log(resp);
                            if (resp) {
                                toastr.success('Quote Successfully Approved.');
                                $state.go('main.admintask');
                                //$state.go('approve', { quoteId: qoute._id, taskId: $scope.task._id });
                            }
                        });

                    }, function() {
                        console.log('NO')
                    });

                };

                $scope.openListMod = function(list) {
                    var modalInstance1 = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        size: 'lg',
                        templateUrl: 'modules/admin/modal/quotelist.html',
                        controller: 'modalInstanceCtrl',
                        resolve: {
                            items: function() {
                                return { quoteId: list._id, taskId: $scope.task._id };
                            }
                        }
                    });

                    modalInstance1.result.then(function(selectedItem) {
                        $scope.selected = selectedItem;
                    }, function() {
                        $log.info('Modal dismissed at: ' + new Date());
                    });
                };

                $scope.cancel = function() {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.openMod = function() {
                    var modalInstance = $uibModal.open({
                        animation: $scope.animationsEnabled,
                        size: 'lg',
                        templateUrl: 'modules/admin/modal/addtask.html',
                        controller: 'modalInstanceCtrl',
                        resolve: {
                            items: function() {
                                return $scope.items;
                            }
                        }
                    });

                    modalInstance.result.then(function(selectedItem) {
                        $scope.selected = selectedItem;
                    }, function() {
                        $log.info('Modal dismissed at: ' + new Date());
                    });
                };
                $scope.cancel = function() {
                    $uibModalInstance.dismiss('cancel');
                };



                $scope.toggleAnimation = function() {
                    $scope.animationsEnabled = !$scope.animationsEnabled;
                };



                $scope.hideCard = function() {
                    $scope.showstartCard = false;
                    $scope.showsecondCard = true;
                    $scope.showthirdCard = false;
                };
                $scope.hideCard1 = function() {
                    $scope.showsecondCard = false;
                    $scope.showstartCard = true;
                    $scope.showthirdCard = false;
                };
                $scope.hideC = function() {
                    $scope.showsecondCard = false;
                };
                $scope.hideCard3 = function() {
                    $scope.showthirdCard = true;
                    $scope.showsecondCard = false;
                    $scope.showstartCard = false;
                };
                $scope.uploadPic = function(file) {
                    file.upload = Upload.upload({
                        url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                        data: { username: $scope.username, file: file },
                    });

                    file.upload.then(function(response) {
                        $timeout(function() {
                            file.result = response.data;
                        });
                    }, function(response) {
                        if (response.status > 0)
                            $scope.errorMsg = response.status + ': ' + response.data;
                    }, function(evt) {
                        // Math.min is to fix IE which reports 200% sometimes
                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
                    });
                }
            }
        ]);
})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('modalInstanceCtrl', ['$scope', '$state', '$uibModalInstance', 'toastr', 'items', 'FileUploader', '$location', '$anchorScroll', 'Contractors', 'CurrentUser', 'TaskTypes', 'Tasks', 'ngDialog',
            function($scope, $state, $uibModalInstance, toastr, items, FileUploader, $location, $anchorScroll, Contractors, CurrentUser, TaskTypes, Tasks, ngDialog) {
                console.log('sulod');

                $scope.task = {};
                $scope.data = {};
                $scope.task.contractors = [];
                $scope.taskTypes = [];
                $scope.priorities = [];
                $scope.items = items;
                $scope.selected = {
                    item: $scope.items[0]
                };
                $scope.totalItems = 64;
                $scope.currentPage = 1;
                $scope.maxSize = 3;
                $scope.bigTotalItems = 175;
                $scope.bigCurrentPage = 1;

                $scope.contractorData = [];
                $scope.contractors = [];
                $scope.contractor = [];

                $scope.taskTypes = TaskTypes.all();
                $scope.priorities = TaskTypes.priorities();


                if (items.quoteId) {
                    console.log(items.quoteId);
                    Tasks.findById(items.taskId).then(function(data) {
                        $scope.task = data[0];
                    });

                    $scope.$watch('task', function(newValue) {
                        $scope.task = newValue;

                        $scope.data = _.find($scope.task.quotes, { '_id': items.quoteId });
                        $scope.data.totalMisc = parseFloat($scope.data.parking_fee) + parseFloat($scope.data.travel_fee);
                        console.log('$scope.qoute: ', $scope.data);
                    });
                }

                Contractors.find().then(function(data) {
                    $scope.contractorData = data;
                    _.each($scope.contractorData, function(row) {
                        row.checked = false;
                    });
                    for (var i = 0; i <= 2; i++) {
                        if (!_.isUndefined($scope.contractorData[i])) {
                            $scope.contractors.push($scope.contractorData[i]);
                        }
                    }
                    for (var i = 3; i <= data.length; i++) {
                        if (!_.isUndefined($scope.contractorData[i])) {
                            $scope.contractor.push($scope.contractorData[i]);
                        }
                    }
                });

                $scope.showConfirm = function(qoute) {

                    ngDialog.openConfirm({
                        title: '',
                        templateUrl: 'modules/main/dialog/submitQuote.html',
                        className: 'ngdialog-theme-default',
                        scope: $scope
                    }).then(function() {
                        console.log('YES');

                        _.each($scope.task.quotes, function(row) {
                            if (row._id == qoute._id) {
                                row.approved = true;
                            }
                        });

                        Tasks.findByIdAndUpdate(items.taskId, $scope.task).then(function(resp) {
                            console.log(resp);
                            if (resp) {
                                toastr.success('Quote Successfully Approved.');
                                $state.go('main.admintask');
                            }
                        });

                    }, function() {
                        console.log('NO')
                    });

                };

                $scope.setPage = function(pageNo) {
                    $scope.currentPage = pageNo;
                };

                $scope.scrollTo = function(id) {
                    $location.hash(id);
                    console.log($location.hash());
                    $anchorScroll();
                };

                $scope.pageChanged = function() {
                    $log.log('Page changed to: ' + $scope.currentPage);
                };

                $scope.myVar = false;
                $scope.toggle = function() {
                    $scope.myVar = !$scope.myVar;
                };

                var uploader = $scope.uploader = new FileUploader({

                });
                uploader.filters.push({
                    name: 'customFilter',
                    fn: function(item /*{File|FileLikeObject}*/ , options) {
                        return this.queue.length < 10;
                    }
                });

                $scope.ok = function() {
                    $uibModalInstance.close($scope.selected.item);
                };

                $scope.cancel = function() {
                    $uibModalInstance.dismiss('cancel');
                };

                $scope.addContractoTask = function(con) {
                    console.log('con: ', con);
                    if (con.checked) {
                        $scope.task.contractors.push(con);
                    } else {
                        _.remove($scope.task.contractors, function(row) {
                            return (row._id == con._id);
                        });
                    }
                    console.log('$scope.task.contractors: ', $scope.task.contractors);
                };

                $scope.createTask = function(form) {
                    if (form.$valid) {
                        if (!_.isEmpty($scope.task)) {
                            $scope.task.reporter = CurrentUser.user();
                            if (!_.isUndefined($scope.task.priority && $scope.task.tasktype && $scope.task.deadline && $scope.task.date_requested)) {
                                Tasks.create($scope.task).then(function(resp) {
                                    if (resp) {
                                        toastr.success('Task Successfully Sent.');
                                        $scope.ok();
                                        $state.go('main.admindash');
                                    }
                                });
                            } else {
                                toastr.error('Please complete the fields.')
                            }
                        }
                    }

                };
            }
        ]);
})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('admintaskCtrl', admintaskCtrl);

    admintaskCtrl.$inject = ['$scope', 'Tasks', 'Contractors', '$state', '$stateParams', 'TaskTypes', 'CurrentUser'];

    function admintaskCtrl($scope, Tasks, Contractors, $state, $stateParams, TaskTypes, CurrentUser) {
        $scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;

        $scope.task = {};
        $scope.task.contractors = [];
        $scope.completeTask = false;

        $scope.taskTypes = [];
        $scope.priorities = [];

        $scope.progressData = [];
        $scope.pendingData = [];
        $scope.completedData = [];
        $scope.newTaskData = [];

        $scope.reportsData = [];

        $scope.tasklist = [];

        if ($stateParams.taskId) {
            Tasks.findById($stateParams.taskId).then(function(data) {
                $scope.task = data[0];
            });
        } else {
            // $scope.task = Dummy.task();
            $scope.task = {};
            $scope.task.contractors = [];

            $scope.taskTypes = TaskTypes.all();
            $scope.priorities = TaskTypes.priorities();

            $scope.contractorData = [];
            $scope.contractors = [];
            $scope.contractor = [];

            Contractors.findAll().then(function(data) {
                $scope.contractorData = data;
                _.each($scope.contractorData, function(row) {
                    row.checked = false;
                });

                for (var i = 0; i <= 2; i++) {
                    if (!_.isUndefined($scope.contractorData[i])) {
                        $scope.contractors.push($scope.contractorData[i]);
                    }
                }

                for (var i = 2; i <= data.length; i++) {
                    if (!_.isUndefined($scope.contractorData[i])) {
                        $scope.contractor.push($scope.contractorData[i]);
                    }
                }
            });
        }

        Tasks.find().then(function(data) {
            console.log(data);
            _.each(data, function(row) {
                if (row.reporter.id == CurrentUser.user().id) {
                    $scope.tasklist.push(row);
                    console.log('row: ', row._id);
                }
            });
        });

        $scope.$watch('tasklist', function(tasklist) {

            $scope.newTaskData = tasklist;

            // console.log('$scope.newTaskData: ', $scope.newTaskData);

            _.each($scope.newTaskData, function(row) {
                var pending = 0;
                var completed = 0;
                var progress = 0;


                _.each(row.quotes, function(row1) {
                    if (row1.approved && row1.status != 'progress' && row1.status != 'completed') {
                        pending++;
                    }

                    if (row1.approved && row1.status == 'progress') {
                        progress++;
                    }

                    if (row1.approved && row1.status == 'completed') {
                        completed++;
                    }

                    if (!_.isUndefined(row1.check) && row1.check == 'in') {
                        row.checkStatus = 'in';
                    } else if (!_.isUndefined(row1.check) && row1.check == 'out') {
                        row.checkStatus = 'out';
                    }
                });

                if (pending > 0) {
                    $scope.pendingData.push(row);
                    pending = 0;
                }

                if (progress > 0) {
                    $scope.progressData.push(row);
                    progress = 0;
                }

                if (completed > 0) {
                    $scope.completedData.push(row);
                    completed = 0;
                }
            });

            _.each($scope.pendingData, function(row) {
                _.remove($scope.newTaskData, function(selectedData) {
                    return selectedData._id == row._id;
                });
            });

            _.each($scope.progressData, function(row) {
                _.remove($scope.newTaskData, function(selectedData) {
                    return selectedData._id == row._id;
                });

                _.remove($scope.pendingData, function(selectedData) {
                    return selectedData._id == row._id;
                });

                _.remove($scope.completedData, function(selectedData) {
                    return selectedData._id == row._id;
                });
            });

            _.each($scope.completedData, function(row) {
                _.remove($scope.newTaskData, function(selectedData) {
                    return selectedData._id == row._id;
                });
            });

            /* console.log('$scope.newTaskData: ', $scope.newTaskData);
             console.log('$scope.pendingData: ', $scope.pendingData);
             console.log('$scope.progressData: ', $scope.progressData);
             console.log('$scope.completedData: ', $scope.completedData);*/
            $scope.$broadcast('scroll.refreshComplete');
        });



        if ($stateParams.taskId) {
            Tasks.findById($stateParams.taskId).then(function(data) {
                $scope.task = data[0];
            });

            $scope.$watch('task', function(newValue) {
                $scope.task = newValue;
                console.log('$scope.quotes: ', $scope.task.quotes);

                _.each($scope.task.quotes, function(row) {
                    var total2 = 0;
                    _.each(row.descriptions, function(row1) {
                        total2 += parseFloat(row1.rate);
                    });
                    row.grossothers = total2;

                    row.totalothers = parseFloat(row.material_fee) + parseFloat(row.parking_fee) + parseFloat(row.travel_fee) + parseFloat(row.grossothers);
                });
            });
        }

        $scope.deTails = function(list) {
            console.log(list);
            $state.go('main.forapprovaltask', { taskId: list._id });
        };

        $scope.qowlist = function(list) {
            console.log(list);
            $state.go('main.qowlist', { taskId: list._id });
        };

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
            $scope.showthirdCard = false;
        };
        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
            $scope.showthirdCard = false;
        };
        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };
        $scope.hideCard3 = function() {
            $scope.showthirdCard = true;
            $scope.showsecondCard = false;
            $scope.showstartCard = false;
        };



    }
})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('adminmainCtrl', adminmainCtrl);

    adminmainCtrl.$inject = ['$scope', '$timeout'];

    function adminmainCtrl($scope, $timeout) {
        $scope.loadingscreen = false;

        $timeout(function() {
            $scope.loadingscreen = true;

        }, 1000);

    }
})();

(function() {
    'use strict';

    angular.module('contractor')
        .controller('VendorInfoCtrl', VendorInfoCtrl);

    VendorInfoCtrl.$inject = ['$scope', '$state', 'Upload', '$timeout', 'ngDialog', 'Country', 'CityState', 'States' , 'toastr', 'localStorageService', ];

    function VendorInfoCtrl($scope, $state, Upload, $timeout, ngDialog, Country, CityState, States, toastr, localStorageService) {
        $scope.input = [];
        $scope.inputs = [];
        $scope.test = {};
        $scope.data = {};
        $scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;
        $scope.location = {};
        $scope.ratesList = [];
        $scope.rates = {};

        $scope.settings = {
            default: function() {
                var date = new Date();
                return date;
            }
        };
        $scope.data.availabilityArr = [];
        $scope.data.coverageArr = [];

        $scope.avail = {};
        $scope.area = {};

        $scope.countries = Country.all();
        $scope.cities = [];
        $scope.citiesCopy = [];

        $scope.clickToCancel = function() {
            console.log('clickToCancel')
            ngDialog.openConfirm({
                templateUrl: 'modules/main/dialog/cancel.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
                localStorageService.remove('tmpvendor');
            }, function() {
                console.log('NO')
            });
        };

        $scope.onApplyTimePicker = function() {
            console.log('Time range applied.');
        };
        $scope.onClearTimePicker = function() {
            console.log('Time range current operation cancelled.');
        };
        $scope.baseRate = [{
            id: 0,
            value: 'Monday'
        }, {
            id: 1,
            value: 'Tuesday'
        }, {
            id: 2,
            value: 'Wednesday'
        }, {
            id: 3,
            value: 'Thursday'
        }, {
            id: 4,
            value: 'Friday'
        }, {
            id: 5,
            value: 'Saturday'
        }, {
            id: '6',
            value: 'Sunday'
        }];

        $scope.getCountryState = function(country) {
            if (country == 'AUS') {
                $scope.states = States.all();
            } else {
                $scope.states = [];
            }
        };

        $scope.getCityState = function(state) {
            console.log('getCityState: ', state);
            CityState.all(state).then(function(resp) {
                $scope.cities = resp.data;

                var index = 0;
                _.each($scope.cities, function(row) {
                    $scope.citiesCopy.push({
                        id: index,
                        name: row.place_name,
                        view: row.place_name
                    })
                    index++;
                });
            });
        };

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
        };
        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
        };
        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };
        $scope.showCard3 = function() {
            $scope.showthirdCard = true;
        };
        $scope.addSched = function(item) {
            if (item) {
                $scope.data.availabilityArr.push({
                    availability: item.availability,
                    start: item.start,
                    end: item.end
                });
                
                $scope.avail.availability = '';
                $scope.avail.start = '';
                $scope.avail.end = '';
            }
        };

        $scope.addLocation = function(item) {
            console.log('item: ', item);
            if (item) {
                $scope.data.coverageArr.push({
                    area: item
                });
                console.log($scope.data.coverageArr);
                $scope.area.coverage = '';
            }
        };

        $scope.onApplyTimePicker = function() {
            console.log('Time range applied.');
        };
        $scope.onClearTimePicker = function() {
            console.log('Time range current operation cancelled.');
        };
        $scope.addArea = function(item) {
            if (item) {
                $scope.data.coverageArr.push({
                    area: item
                });
                $scope.area.coverage = '';
            }
        };

        $scope.uploadPic = function(file) {
            file.upload = Upload.upload({
                url: 'https://angular-file-upload-cors-srv.appspot.com/upload',
                data: { username: $scope.username, file: file },
            });

            file.upload.then(function(response) {
                $timeout(function() {
                    file.result = response.data;
                });
            }, function(response) {
                if (response.status > 0)
                    $scope.errorMsg = response.status + ': ' + response.data;
            }, function(evt) {
                // Math.min is to fix IE which reports 200% sometimes
                file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            });
        };

        $scope.vendorinfo = function() {       
                
                if(_.isUndefined($scope.area.coverage) && $scope.data.coverageArr.length < 1){
                    toastr.error('Area of Coverage are required!');
                    return;
                }

                if(_.isUndefined($scope.avail.availability) && $scope.data.availabilityArr.length < 1){
                    toastr.error('Availability are required!');
                    return;
                }

                if ($scope.avail.availability) {
                    $scope.data.availabilityArr.push({
                        availability: $scope.avail.availability,
                        start: $scope.avail.start,
                        end: $scope.avail.end
                    });

                    $scope.avail.availability = '';
                    $scope.avail.start = '';
                    $scope.avail.end = '';
                }

                if ($scope.area.coverage) {
                    $scope.data.coverageArr.push({
                        area: $scope.area.coverage
                    });
                    $scope.area.coverage = '';
                }

                $scope.data.username =  _.trim(_.lowerCase($scope.data.lname)) + '.' +  _.trim(_.lowerCase($scope.data.fname));
                $scope.data.password = '123456';

                localStorageService.set('tmpvendor', JSON.stringify($scope.data));
                $state.go('payment');
        };

    }

})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('vendorRatetCtrl', vendorRatetCtrl);

    vendorRatetCtrl.$inject = ['$scope', 'ngDialog', '$filter', '$state', 'Banks', 'localStorageService'];

    function vendorRatetCtrl($scope, ngDialog, $filter, $state, Banks, localStorageService) {

        console.log('vendorRatetCtrl: ');

        $scope.data = {};
        $scope.rate = {};

        $scope.inputs = [];
        $scope.test = {};
        $scope.data = {};
        $scope.showstartCard = true;
        $scope.showsecondCard = false;
        $scope.showthirdCard = false;

        $scope.ratesList = [];
        $scope.rates = {};

        $scope.banks = [];
        $scope.banksCopy = [];

        $scope.baseRate = [{
            id: 0,
            value: 'Base Rate'
        }, {
            id: 1,
            value: 'After Hours'
        }, {
            id: '2',
            value: 'Weekend'
        }];

        $scope.clickToOpen = function() {
            console.log('clickToOpen')
            ngDialog.openConfirm({
                templateUrl: 'modules/main/dialog/submit.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };
        $scope.clickToCancel = function() {
            console.log('clickToCancel')
            ngDialog.openConfirm({
                templateUrl: 'modules/main/dialog/cancel.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };

        $scope.hideCard = function() {
            $scope.showstartCard = false;
            $scope.showsecondCard = true;
        };

        $scope.hideCard1 = function() {
            $scope.showsecondCard = false;
            $scope.showstartCard = true;
        };

        $scope.hideC = function() {
            $scope.showsecondCard = false;
        };

        $scope.showCard3 = function() {
            $scope.showthirdCard = true;
        };
        $scope.addSched = function() {
            $scope.inputs.push({});
        };
        // $scope.addRates = function(rate) {
        //     console.log('addRates: ',rate);
        //     if (!_.isEmpty(rate)) {
        //         $scope.ratesList.push(rate);
        //         $scope.rates = {};
        //     }
        // };

        $scope.removeOther = function(index) {
            $scope.ratesList.splice(index, 1);
        };

        Banks.all().then(function(resp) {
            $scope.banks = resp.data;

            _.each($scope.banks, function(row) {
                $scope.banksCopy.push({
                    id: row.id,
                    name: row.name,
                    view: row.name
                });
            });
        });

        $scope.selectedCountry = function($item) {
            console.log($item.description.id);
            console.log($item.originalObject );
            $scope.data.bankname=$item.originalObject.name;
        };

        $scope.vendorRate = function() {
                if(!$scope.data.standard){
                    $scope.data.ratestandard = '';
                }

                if(!$scope.data.other){
                    $scope.data.other_base_hours = '';
                    $scope.data.other_after_hours = '';
                    $scope.data.other_weekends = '';
                }

                if(!$scope.data.direct){
                    $scope.data.bankaccount = '';
                    $scope.data.bankaccountnum = '';
                    $scope.data.bankbranch = '';
                    $scope.data.bankbsb = '';
                    $scope.data.bankname = '';
                }

                if(!$scope.data.check){
                    if(!$scope.data.check_prefer_info){
                        $scope.data.check_country = '';
                        $scope.data.check_state = '';
                        $scope.data.check_city = '';
                        $scope.data.check_address = '';
                        $scope.data.check_postcode = '';
                    }
                }
                console.log($scope.data.bankname);
                localStorageService.set('tmpvendorrate', JSON.stringify($scope.data));

                $state.go('qualification');
        };

    }
})();

(function() {
    'use strict'

    angular.module('contractor')
        .controller('vendorQualificationCtrl', vendorQualificationCtrl);

    vendorQualificationCtrl.$inject = ['$scope', '$state', 'FileUploader', 'ngDialog', 'localStorageService', 'Contractors'];

    function vendorQualificationCtrl($scope, $state, FileUploader, ngDialog, localStorageService, Contractors) {
        $scope.othersList = [];
        $scope.others = {};

        $scope.clickToCancel = function() {
            console.log('clickToCancel')
            ngDialog.openConfirm({
                 title: 'sdsdsd',
                templateUrl: 'modules/main/dialog/cancel.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
            }, function() {
                console.log('NO')
            });
        };
        $scope.clickToOpen = function() {
            console.log('clickToOpen')
            ngDialog.openConfirm({
                title: '',
                templateUrl: 'modules/main/dialog/submit.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES')
                var data1 = JSON.parse(localStorageService.get('tmpvendor')) || {};
                    var data2 = JSON.parse(localStorageService.get('tmpvendorrate')) || {};
                    var newObj = _.extend(data1, data2, $scope.data);

                    $scope.data = newObj;
                    // localStorageService.set('tmpqualification', JSON.stringify($scope.data));
                    Contractors.create($scope.data).then(function(resp) {
                        console.log('resp: ', resp);
                        if (resp) {
                                localStorageService.remove('tmpvendor');
                                localStorageService.remove('tmpvendorrate');
                                $state.go('applicsent', { id: data1._id });                        
                        }
                    });

            }, function() {
                console.log('NO')
            });
        };
        

        $scope.addOthers = function(task) {
            if (!_.isEmpty(task)) {
                $scope.othersList.push(task);
                $scope.others = {};
            }
        };

        $scope.removeOther = function(index) {
            $scope.othersList.splice(index, 1);
        };

        var uploader = $scope.uploader = new FileUploader({

        });

        // FILTERS

        uploader.filters.push({
            name: 'customFilter',
            fn: function(item /*{File|FileLikeObject}*/ , options) {
                return this.queue.length < 10;
            }
        });
        var uploader1 = $scope.uploader1 = new FileUploader({

        });

        // FILTERS

        uploader1.filters.push({
            name: 'customFilter',
            fn: function(item /*{File|FileLikeObject}*/ , options) {
                return this.queue.length < 10;
            }
        });

    }

})();
(function() {
    'use strict';

    angular.module('contractor')
        .controller('ProcurementQoutesCtrl', ProcurementQoutesCtrl)
        .controller('ProcurementQoutesDetailsCtrl', ProcurementQoutesDetailsCtrl);

    ProcurementQoutesCtrl.$inject = ['$scope', '$state', 'localStorageService', 'Tasks', '$stateParams', 'ngDialog',
    ];

    function ProcurementQoutesCtrl($scope, $state, localStorageService, Tasks, $stateParams, ngDialog) {
        console.log('quote list');
        
            if ($stateParams.taskId) {
                Tasks.findById($stateParams.taskId).then(function(data) {
                    $scope.task = data[0];
                });

                $scope.$watch('task', function(newValue) {
                    $scope.task = newValue;
                    console.log('$scope.quotes: ', $scope.task.quotes);

                    _.each($scope.task.quotes, function(row) {
                        var total2 = 0;
                        _.each(row.descriptions, function(row1) {
                            total2 += parseFloat(row1.rate);
                        });
                        row.grossothers = total2;

                        row.totalothers = parseFloat(row.material_fee) + parseFloat(row.parking_fee) + parseFloat(row.travel_fee) + parseFloat(row.grossothers);
                    });
                });
            }
        

        $scope.showConfirm = function(qoute) {

            ngDialog.openConfirm({
                title: '',
                templateUrl: 'modules/main/dialog/submitQuote.html',
                className: 'ngdialog-theme-default',
                scope: $scope
            }).then(function() {
                console.log('YES');

                    _.each($scope.task.quotes, function(row) {
                        if (row._id == qoute._id) {
                            row.approved = true;
                        }
                    });

                    Tasks.findByIdAndUpdate($stateParams.taskId, $scope.task).then(function(resp) {
                        console.log(resp);
                        if (resp) {                            
                            toastr.success('Quote Successfully Approved.');
                            $state.go('main.admintask');
                            //$state.go('approve', { quoteId: qoute._id, taskId: $scope.task._id });
                        }
                    });

            }, function() {
                console.log('NO')
            });

        };

        $scope.openListMod = function() {
            var modalInstance1 = $uibModal.open({
                animation: $scope.animationsEnabled,
                size: 'lg',
                templateUrl: 'modules/admin/modal/quotelist.html',
                controller: 'modalInstanceCtrl',
                resolve: {
                    items: function() {
                        return $scope.items;
                    }
                }
            });

            modalInstance1.result.then(function(selectedItem) {
                $scope.selected = selectedItem;
            }, function() {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.viewApproval = function(qoute) {
            $ionicViewSwitcher.nextDirection('forward');

            $state.go('approve', { quoteId: qoute._id, taskId: $scope.task._id });
        };

        $scope.gotToProfile = function(user) {
            console.log('user: ', user._id);
            $ionicViewSwitcher.nextDirection('forward');
            $state.go('userprofile', { 'userId': user._id });
        };
    }


    ProcurementQoutesDetailsCtrl.$inject = ['$scope', '$state', 'Tasks', '$stateParams', '$ionicViewSwitcher'];

    function ProcurementQoutesDetailsCtrl($scope, $state, Tasks, $stateParams, $ionicViewSwitcher) {
        $scope.task = {};
        $scope.data = {};

        $scope.$on("$ionicView.beforeEnter", function(event, data) {
            if ($stateParams.quoteId) {
                Tasks.findById($stateParams.taskId).then(function(data) {
                    $scope.task = data[0];
                });

                $scope.$watch('task', function(newValue) {
                    $scope.task = newValue;

                    $scope.data = _.find($scope.task.quotes, { '_id': $stateParams.quoteId });
                    $scope.data.totalMisc = parseFloat($scope.data.parking_fee) + parseFloat($scope.data.travel_fee);
                    console.log('$scope.qoute: ', $scope.data);
                });
            }
        });

        $scope.gotToProfile = function(user) {
            console.log('user: ', user._id);
            $ionicViewSwitcher.nextDirection('forward');
            $state.go('userprofile', { 'userId': user._id });
        };
    }

})();

(function() {
    'use strict';

    angular.module('contractor')
        .directive('sidebar', function() {
            return {
                restrict: 'C',
                controller: 'admindashCtrl',
                compile: function(tElement, tAttrs, transclude) {

                    //Enable sidebar tree view controls
                    $.AdminLTE.tree(tElement);

                }
            };
        })
        .directive('header', function() {
            return {
                restrict: 'E',
                templateUrl: './modules/templates/header.html',
                compile: function(tElement, tAttrs, transclude) {
                    $.AdminLTE.pushMenu($(tElement).find('.sidebar-toggle'));
                }
            };
        })
        .directive('sliderNav', function() {
            /*
             *  SliderNav - A Simple Content Slider with a Navigation Bar
             *  Copyright 2010 Monjurul Dolon, http://mdolon.com/
             *  Released under the MIT, BSD, and GPL Licenses.
             *  More information: http://devgrow.com/slidernav
             */
            $.fn.sliderNav = function(options) {
                var defaults = {
                    items: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"],
                    debug: false,
                    height: null,
                    arrows: true
                };
                var opts = $.extend(defaults, options);
                var o = $.meta ? $.extend({}, opts, $.data()) : opts;
                var slider = $(this);
                $(slider).addClass('slider');
                $('.slider-content li:first', slider).addClass('selected');
                $(slider).append('<div class="slider-nav"><ul></ul></div>');
                for (var i in o.items) {
                    $('.slider-nav ul', slider).append("<li><a alt='#" + o.items[i] + "'>" + o.items[i] + "</a></li>");
                }
                var height = $('.slider-nav', slider).height();
                if (o.height) {
                    height = o.height;
                }
                $('.slider-content, .slider-nav', slider).css('height', height);
                if (o.debug) {
                    $(slider).append('<div id="debug">Scroll Offset: <span>0</span></div>');
                }
                $('.slider-nav a', slider).mouseover(function(event) {
                    var target = $(this).attr('alt');
                    var cOffset = $('.slider-content', slider).offset().top;
                    var tOffset = $('.slider-content ' + target, slider).offset().top;
                    var height = $('.slider-nav', slider).height();
                    if (o.height) {
                        height = o.height;
                    }
                    var pScroll = (tOffset - cOffset) - height / 8;
                    $('.slider-content li', slider).removeClass('selected');
                    $(target).addClass('selected');
                    $('.slider-content', slider).stop().animate({
                        scrollTop: '+=' + pScroll + 'px'
                    });
                    if (o.debug) {
                        $('#debug span', slider).html(tOffset);
                    }
                });
                if (o.arrows) {
                    $('.slider-nav', slider).css('top', '20px');
                    $(slider).prepend('<div class="slide-up end"><span class="arrow up"></span></div>');
                    $(slider).append('<div class="slide-down"><span class="arrow down"></span></div>');
                    $('.slide-down', slider).click(function() {
                        $('.slider-content', slider).animate({
                            scrollTop: "+=" + height + "px"
                        }, 500);
                    });
                    $('.slide-up', slider).click(function() {
                        $('.slider-content', slider).animate({
                            scrollTop: "-=" + height + "px"
                        }, 500);
                    });
                }
            };

            return {
                restrict: 'A',
                link: function(scope, element, attrs) {
                    element.sliderNav();
                }
            };
        })
        .directive('sidebarToggle', function() {
            return {
                restrict: 'C',
                link: function(scope, element, attrs) {
                    element.bind('click', function(e) {
                        e.preventDefault();

                        //If window is small enough, enable sidebar push menu
                        if ($(window).width() <= 992) {
                            $('.row-offcanvas').toggleClass('active');
                            $('.left-side').removeClass("collapse-left");
                            $('.right-side').removeClass("strech");
                            $('.row-offcanvas').toggleClass("relative");
                        } else {
                            //Else, enable content streching
                            $('.left-side').toggleClass("collapse-left");
                            $('.right-side').toggleClass("strech");
                        }
                    });
                }
            };
        })
        .directive('btn', function() {
            //Add hover support for touch devices
            return {
                restrict: 'C',
                link: function(scope, element, attrs) {
                    element.bind('touchstart', function() {
                        $(this).addClass('hover');
                    }).bind('touchend', function() {
                        $(this).removeClass('hover');
                    });
                }
            };
        })
        .directive('treeview', function() {
            /*
             * SIDEBAR MENU
             * ------------
             * This is a custom plugin for the sidebar menu. It provides a tree view.
             *
             * Usage:
             * $(".sidebar).tree();
             *
             * Note: This plugin does not accept any options. Instead, it only requires a class
             *       added to the element that contains a sub-menu.
             *
             * When used with the sidebar, for example, it would look something like this:
             * <ul class='sidebar-menu'>
             *      <li class="treeview active">
             *          <a href="#>Menu</a>
             *          <ul class='treeview-menu'>
             *              <li class='active'><a href=#>Level 1</a></li>
             *          </ul>
             *      </li>
             * </ul>
             *
             * Add .active class to <li> elements if you want the menu to be open automatically
             * on page load. See above for an example.
             */
            $.fn.tree = function() {
                return this.each(function() {
                    var btn = $(this).children("a").first();
                    var menu = $(this).children(".treeview-menu").first();
                    var isActive = $(this).hasClass('active');

                    //initialize already active menus
                    if (isActive) {
                        menu.show();
                        btn.children(".fa-angle-left").first().removeClass("fa-angle-left").addClass("fa-angle-down");
                    }
                    //Slide open or close the menu on link click
                    btn.click(function(e) {
                        e.preventDefault();
                        if (isActive) {
                            //Slide up to close menu
                            menu.slideUp();
                            isActive = false;
                            btn.children(".fa-angle-down").first().removeClass("fa-angle-down").addClass("fa-angle-left");
                            btn.parent("li").removeClass("active");
                        } else {
                            //Slide down to open menu
                            menu.slideDown();
                            isActive = true;
                            btn.children(".fa-angle-left").first().removeClass("fa-angle-left").addClass("fa-angle-down");
                            btn.parent("li").addClass("active");
                        }
                    });

                    /* Add margins to submenu elements to give it a tree look */
                    menu.find("li > a").each(function() {
                        var pad = parseInt($(this).css("margin-left")) + 10;

                        $(this).css({
                            "margin-left": pad + "px"
                        });
                    });

                });

            };
            return {
                restrict: 'C',
                link: function(scope, element, attrs) {
                    element.tree();
                }
            };
        })
        .directive('errSrc', function() {
            return {
                link: function(scope, element, attrs) {
                    scope.$watch(function() {
                        return attrs['ngSrc'];
                    }, function(value) {
                        if (!value) {
                            element.attr('src', attrs.errSrc);
                        }
                    });

                    element.bind('error', function() {
                        element.attr('src', attrs.errSrc);
                    });
                }
            };
        })
        .directive("repeatEnd", function() {
            return {
                restrict: "A",
                link: function(scope, element, attrs) {
                    if (scope.$last) {
                        scope.$eval(attrs.repeatEnd);
                    }
                }
            };
        })
        .directive('validNumber', function() {
            return {
                require: '?ngModel',
                link: function(scope, element, attrs, ngModelCtrl) {
                    if (!ngModelCtrl) {
                        return;
                    }

                    ngModelCtrl.$parsers.push(function(val) {
                        if (angular.isUndefined(val)) {
                            var val = '';
                        }

                        var clean = val.replace(/[^-0-9\.]/g, '');
                        var negativeCheck = clean.split('-');
                        var decimalCheck = clean.split('.');
                        if (!angular.isUndefined(negativeCheck[1])) {
                            negativeCheck[1] = negativeCheck[1].slice(0, negativeCheck[1].length);
                            clean = negativeCheck[0] + '-' + negativeCheck[1];
                            if (negativeCheck[0].length > 0) {
                                clean = negativeCheck[0];
                            }

                        }

                        if (!angular.isUndefined(decimalCheck[1])) {
                            decimalCheck[1] = decimalCheck[1].slice(0, 2);
                            clean = decimalCheck[0] + '.' + decimalCheck[1];
                        }

                        if (val !== clean) {
                            ngModelCtrl.$setViewValue(clean);
                            ngModelCtrl.$render();
                        }
                        return clean;
                    });

                    element.bind('keypress', function(event) {
                        if (event.keyCode === 32) {
                            event.preventDefault();
                        }
                    });
                }
            };
        });

})();
